pipeline {
    agent any
    
    tools {
        maven 'Maven'
        jdk 'jdk-17'  // Ensure this matches your Jenkins JDK installation name
    }
    
    environment {
        // Versioning configuration
        MAJOR_VERSION = "1"
        MINOR_VERSION = "0"
        VERSION = "${MAJOR_VERSION}.${MINOR_VERSION}.${env.BUILD_NUMBER}"
        
        // Docker configuration
        DOCKER_REGISTRY = "kharshavardhanc"  // Your Docker Hub username
        APP_NAME = "ftohbackend"
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${APP_NAME}:${VERSION}"
        
        // Deployment configuration
        DEPLOY_PORT = "8080"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                     url: 'https://github.com/KHarshaVardhanC/FarmToHome.git',
                     changelog: true
            }
        }
        
        stage('Build & Test') {
            steps {
                dir('ftohbackend') {
                    bat 'mvn clean package -Dmaven.test.skip=true'
                    // junit 'target/surefire-reports/*.xml'  // Archive test results
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('ftohbackend') {
                    script {
                        // Build with build args if needed
                        docker.build("${DOCKER_IMAGE}", "--build-arg JAR_FILE=target/*.jar .")
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        
       stage('Deploy') {
    steps {
        script {
            // Stop and remove old container if exists
            bat 'docker stop ftohbackend || exit 0'
            bat 'docker rm ftohbackend || exit 0'
            
            // Run new container with proper resource limits
            bat """
                docker run -d ^
                    --name ftohbackend ^
                    -p 8080:8080 ^
                    --restart unless-stopped ^
                    --memory=512m ^
                    --cpus=1 ^
                    ${DOCKER_IMAGE}
            """
        }
    }
}
    }
    
    post {
        always {
            cleanWs()
            echo "Pipeline completed - ${currentBuild.result}"
        }
        success {
            slackSend channel: '#deployments',
                     message: "SUCCESS: ${APP_NAME} v${VERSION} deployed"
        }
        failure {
            slackSend channel: '#deployments',
                     message: "FAILED: Pipeline ${env.BUILD_URL}"
            mail to: 'kattaharshavardhan56@gmail.com',
                 subject: "Pipeline Failed: ${env.JOB_NAME}",
                 body: "Check ${env.BUILD_URL}"
        }
    }
}
